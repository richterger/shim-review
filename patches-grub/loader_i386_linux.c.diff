--- grub-core/loader/i386/linux.c	2013-12-24 17:29:27.000000000 +0100
+++ ../../../patched.grub-2.02_beta2-r9/work/grub-2.02~beta2/grub-core/loader/i386/linux.c	2016-12-11 14:41:14.330000000 +0100
@@ -35,6 +35,11 @@
 #include <grub/i18n.h>
 #include <grub/lib/cmdline.h>
 #include <grub/linux.h>
+#include <grub/time.h>
+
+#define ECOS_VERIFY_SIGNATURE 1
+#define DEFINE_ECOS_VERIFY_SIGNATURE 1
+#include "../module_signing.c"
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
@@ -173,8 +178,7 @@
 
   mmap_size = count * sizeof (struct grub_e820_mmap);
 
-  /* Increase the size a bit for safety, because GRUB allocates more on
-     later.  */
+    /* Increase the size a bit for safety, because GRUB allocates more on later.  */
   mmap_size += (1 << 12);
 
   return page_align (mmap_size);
@@ -688,6 +692,11 @@
   int relocatable;
   grub_uint64_t preferred_address = GRUB_LINUX_BZIMAGE_ADDR;
 
+#ifdef ECOS_VERIFY_SIGNATURE
+    const grub_uint8_t *sig;
+    grub_size_t siglen = 0, real_modlen = 0;
+#endif
+
   grub_dl_ref (my_mod);
 
   if (argc == 0)
@@ -696,6 +705,10 @@
       goto fail;
     }
 
+#ifdef ECOS_VERIFY_SIGNATURE
+  grub_file_filter_disable_pubkey ();
+  grub_dprintf ("crypt", "linux: Verify Sig file %s\n", argv[0]);
+#endif
   file = grub_file_open (argv[0]);
   if (! file)
     goto fail;
@@ -703,8 +716,9 @@
   if (grub_file_read (file, &lh, sizeof (lh)) != sizeof (lh))
     {
       if (!grub_errno)
-	grub_error (GRUB_ERR_BAD_OS, N_("premature end of file %s"),
-		    argv[0]);
+        {
+            grub_error (GRUB_ERR_BAD_OS, N_("premature end of file %s"), argv[0]);
+        }
       goto fail;
     }
 
@@ -872,7 +886,9 @@
 
   /* The other parameters are filled when booting.  */
 
+#ifndef ECOS_VERIFY_SIGNATURE
   grub_file_seek (file, real_size + GRUB_DISK_SECTOR_SIZE);
+#endif
 
   grub_dprintf ("linux", "bzImage, setup=0x%x, size=0x%x\n",
 		(unsigned) real_size, (unsigned) prot_size);
@@ -1016,10 +1032,78 @@
 			      maximal_cmdline_size
 			      - (sizeof (LINUX_IMAGE) - 1));
 
+#ifdef ECOS_VERIFY_SIGNATURE
+    // seek to beginning and (re-)load kernel header for hashing
+    len = real_size + GRUB_DISK_SECTOR_SIZE;
+    grub_file_seek (file, 0);
+
+    void *fingerprint_context = NULL;
+    fingerprint_context = grub_zalloc (GRUB_MD_SHA512->contextsize);
+    if (!fingerprint_context)
+    {
+	grub_sleep (10) ;
+	grub_fatal (N_("cannot allocate fingerprint context")) ;
+        return grub_error (GRUB_ERR_OUT_OF_MEMORY, "cannot allocate fingerprint context");
+    }
+    grub_memset (fingerprint_context, 0, sizeof (fingerprint_context));
+    GRUB_MD_SHA512->init (fingerprint_context);
+
+    if (grub_file_read (file, prot_mode_mem, len) != len)
+    {
+        if (!grub_errno)
+	    {
+   	    grub_sleep (10) ;
+	    grub_fatal (N_("premature end of file %s"), argv[0]) ;
+            grub_error (GRUB_ERR_BAD_OS, N_("premature end of file %s"), argv[0]);
+	    }
+        goto fail;
+    }
+    grub_dprintf ("linux", "Hashing kernel header (%d bytes)\n", len);
+    GRUB_MD_SHA512->write (fingerprint_context, prot_mode_mem, len);
+#endif
+
+    // now load protected mode kernel image
   len = prot_file_size;
   if (grub_file_read (file, prot_mode_mem, len) != len && !grub_errno)
-    grub_error (GRUB_ERR_BAD_OS, N_("premature end of file %s"),
-		argv[0]);
+    {
+        grub_error (GRUB_ERR_BAD_OS, N_("premature end of file %s"), argv[0]);
+        goto fail;
+    }
+
+#ifdef ECOS_VERIFY_SIGNATURE
+    // determine real module length (without attached signature)
+    if (grub_mod_verify_get_header(prot_mode_mem, len, &real_modlen, &sig, &siglen))
+    {
+	grub_sleep (10) ;
+	grub_fatal (N_("grub_mod_verify_get_header kernel failed")) ;
+        grub_error (GRUB_ERR_BAD_SIGNATURE, N_("grub_mod_verify_get_header failed"));
+        goto fail;
+    }
+    grub_dprintf ("linux", "Hashing kernel image (%d bytes)\n", real_modlen);
+    GRUB_MD_SHA512->write (fingerprint_context, prot_mode_mem, real_modlen);
+    GRUB_MD_SHA512->final (fingerprint_context);
+
+    // just to make sure :o|
+    if (GRUB_MD_SHA512->mdlen != 64)
+        {
+	grub_sleep (10) ;
+	grub_fatal (N_("Uh-oh: SHA512 has wrong digest length in GRUB :o|")) ;
+        return grub_error (GRUB_ERR_BUG, "Uh-oh: SHA512 has wrong digest length in GRUB :o|");
+	}
+	
+    grub_uint8_t fingerprint [64] ;
+    grub_memcpy (fingerprint, GRUB_MD_SHA512->read (fingerprint_context), GRUB_MD_SHA512->mdlen);
+
+    // verify signature
+    grub_dprintf ("linux", "Verifying signature...\n");
+    if (grub_mod_verify_sig (sig, siglen, fingerprint, 64))
+    {
+	grub_sleep (10) ;
+	grub_fatal (N_("bad kernel signature")) ;
+        grub_error (GRUB_ERR_BAD_SIGNATURE, N_("bad signature"));
+        goto fail;
+    }
+#endif
 
   if (grub_errno == GRUB_ERR_NONE)
     {
@@ -1030,6 +1114,10 @@
 
  fail:
 
+#ifdef ECOS_VERIFY_SIGNATURE
+    grub_free (fingerprint_context);
+#endif
+
   if (file)
     grub_file_close (file);
 
